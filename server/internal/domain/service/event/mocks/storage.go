// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	"go.uber.org/zap"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageStorage is a mock of MessageStorage interface.
type MockMessageStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageStorageMockRecorder
}

// MockMessageStorageMockRecorder is the mock recorder for MockMessageStorage.
type MockMessageStorageMockRecorder struct {
	mock *MockMessageStorage
}

// NewMockMessageStorage creates a new mock instance.
func NewMockMessageStorage(ctrl *gomock.Controller) *MockMessageStorage {
	mock := &MockMessageStorage{ctrl: ctrl}
	mock.recorder = &MockMessageStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageStorage) EXPECT() *MockMessageStorageMockRecorder {
	return m.recorder
}

// HandleReturns mocks base method.
func (m *MockMessageStorage) HandleReturns(logger *zap.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleReturns", logger)
}

// HandleReturns indicates an expected call of HandleReturns.
func (mr *MockMessageStorageMockRecorder) HandleReturns(logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleReturns", reflect.TypeOf((*MockMessageStorage)(nil).HandleReturns), logger)
}

// SendMessageJSON mocks base method.
func (m *MockMessageStorage) SendMessageJSON(ctx context.Context, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageJSON", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageJSON indicates an expected call of SendMessageJSON.
func (mr *MockMessageStorageMockRecorder) SendMessageJSON(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageJSON", reflect.TypeOf((*MockMessageStorage)(nil).SendMessageJSON), ctx, data)
}
